clc % limpia pantalla
clear all % limpia todo
close all %cierra todo
warning off all  % apaga los warnings

newcolors = {'r','g','b','c','m','y','#0072BD','#D95319','#EDB120','#7E2F8E','#77AC30','#4DBEEE','#A2142F'};%se mandan llamar los colores
porcls=[];
nc=input('¿Cuántas clases quieres?   ');%nc-> número de clases
npc=input('¿Cuántas representantes de clase quieres?   ');%npc-> número de representantes por clase

[nclx, ncly]=crearCl(nc,npc);   %Crear clases[nclx -> cord. x de n clases , ncly -> cord. y de n clases]
mdcl = medias(nc,nclx,ncly);%calculo de medias

funsi = input('\n---Opciones---\n   1.- Probar los clasificadores\n   2.- Clasificar un vector\n  0.- Salir\n\n');
switch funsi 
    case 1
        flag2=1;
        while flag2==1   % inicio loop
            vrnz=varianza(nc,npc,nclx,ncly, mdcl);
            limpiar();
            graficando2(nc, nclx, ncly, newcolors); %Imprime en figure(1)
            flag4u=1;
            while flag4u==1
                opcion=input('Eliga el metodo: \n 1.- Metodo de Resustitucion\n 2.- Metodo Cross - Validation\n 3.- Metodo Hold one\n 4.- Limpiar grafica\n 0.-Salir\n');
                if opcion == 0
                    break
                end
                switch opcion
                case 1
                        disp('Metodo 1.- Resustitución ');
                        resusOpt=input('---¿Algún clasificador en especial?---\n 1.-Probar con todos\n 2.- Distancia Mínima \n3.- Máxima probabilidad (Bayes)\n4.- Mahalanobis\n 5.-KNN\n');
                        switch resusOpt
                        case 1
                            for fcla=1:4
                                switch fcla
                                    case 1
                                        disp('Distancia Mínima');
                                    case 2
                                        disp('Bayes');
                                    case 3
                                        disp('Mahalanobis');
                                    case 4
                                        disp('KNN');
                                end  
                                efResust(nc,npc, nclx,ncly, mdcl, vrnz, fcla,porcls);       
                            end
                        case 2 
                            efResust(nc,npc, nclx,ncly, mdcl, vrnz, 1,porcls);    
                        case 3
                            efResust(nc,npc, nclx,ncly, mdcl, vrnz, 2,porcls);    
                        case 4
                            efResust(nc,npc, nclx,ncly, mdcl, vrnz, 3,porcls);    
                        case 5
                            efResust(nc,npc, nclx,ncly, mdcl, vrnz, 4,porcls);
                        end

                  case 2
                        disp('Metodo 2.- ');
                        resusOpt=input('---¿Algún clasificador en especial?---\n 1.-Probar con todos\n 2.- Distancia Mínima \n3.- Máxima probabilidad (Bayes)\n4.- Mahalanobis\n 5.-KNN\n');
                        switch resusOpt
                        case 1
                            for fcla=1:4
                                switch fcla
                                    case 1
                                        disp('Distancia Mínima');
                                    case 2
                                        disp('Bayes');
                                    case 3
                                        disp('Mahalanobis');
                                    case 4
                                        disp('KNN');
                                end  
                                metodocross(nc,npc, nclx,ncly, mdcl, vrnz, fcla,porcls);       
                            end
                        case 2 
                            metodocross(nc,npc, nclx,ncly, mdcl, vrnz, 1,porcls);    
                        case 3
                            metodocross(nc,npc, nclx,ncly, mdcl, vrnz, 2,porcls);    
                        case 4
                           metodocross(nc,npc, nclx,ncly, mdcl, vrnz, 3,porcls);    
                        case 5
                            metodocross(nc,npc, nclx,ncly, mdcl, vrnz, 4,porcls);
                        end
                case 3
                        disp('Metodo 3.- Hold in one: ');
                        resusOpt=input('---¿Algún clasificador en especial?---\n 1.-Probar con todos\n 2.- Distancia Mínima \n3.- Máxima probabilidad (Bayes)\n4.- Mahalanobis\n 5.-KNN\n');
                        switch resusOpt
                        case 1
                            for fcla=1:4
                                switch fcla
                                    case 1
                                        disp('Distancia Mínima');
                                    case 2
                                        disp('Bayes');
                                    case 3
                                        disp('Mahalanobis');
                                    case 4
                                        disp('KNN');
                                end  
                                deja(nc,npc, nclx,ncly, mdcl, vrnz, fclam,porcls);       
                            end
                        case 2 
                            deja(nc,npc, nclx,ncly, mdcl, vrnz, 1,porcls);    
                        case 3
                            deja(nc,npc, nclx,ncly, mdcl, vrnz, 2,porcls);    
                        case 4
                           deja(nc,npc, nclx,ncly, mdcl, vrnz, 3,porcls);    
                        case 5
                            deja(nc,npc, nclx,ncly, mdcl, vrnz, 4,porcls);
                        end
                case 4
                    limpiar();
                end
            end           
            flag2=0;
            
        end %cierre loop      
        
    case 2
        flag=1;
        while flag==1   % inicio loop
            vector=vecd(); %Entrada del vector desconocido
            vrnz=varianza(nc,npc,nclx,ncly, mdcl);
            suma2=sumak(nc,npc,nclx,ncly,vector);

            %---Seleccionar clasificador
                clasi = input('--¿Qué clasificador deseas usar?-- \n 1.- Distancia Mínima \n2.- Máxima probabilidad (Bayes)\n3.- Mahalanobis\n4.- KNN\n5.- Todos \n');

                switch clasi
                    case 1
                        disMin(nc, vector, mdcl, 1);
                    case 2
                        disbayes(nc, vector, mdcl, vrnz, 1);
                    case 3
                        mahalanobis(nc, vector, mdcl, vrnz, 1);%pasar media, clase, varianza y vector
                    case 4
                        KNN(nc,vector,suma2,npc, 1, 0); 
                    case 5
                        disMin(nc, vector, mdcl, 1);
                        disbayes(nc, vector, mdcl, vrnz,1);
                        mahalanobis(nc, vector, mdcl, vrnz,1);
                        KNN(nc,vector,suma2,npc, 1, 0); 
                    otherwise
                        disp('aun no disponible')
                end       

            graficando(nc, vector, nclx, ncly, newcolors);   

            flag=input('\n¿Desea agregar otro vector? 0 = No / 1 = Si \n');    
        end %cierre loop        
    otherwise
        disp('Pues nada, adíos.');
end


disp('fin del proceso');


%Funciones -----

%Eficiencia: resustitución
function susconf=efResust(nc,nr, nclx,ncly, medias, vrnz, clasi,porcls)
maximo=[];
%name='Resustitucion';
    if clasi==4
        flag3=1;
            while flag3==1
                autok=input('\nIngrese valor de K (para KNN): ');
                opcion=mod(autok,2);
                if opcion>0
                    flag3=0;
                else 
                    fprintf('El valor de K debe ser impar');
                end
            end
    end
    susconf= zeros(nc); %inicializando la matriz de confusión
    for f1=1:nc
        for f2=1:nr
           vux=[nclx(:,f2,f1);ncly(:,f2,f1)];
           
           switch clasi
                    case 1
                        aux=disMin(nc, vux, medias, 0);%aqui el clasificador  Distancia mínima hecho
                    case 2
                        aux=disbayes(nc, vux, medias, vrnz, 0); %Dis Bayes hecho
                    case 3
                        aux=mahalanobis(nc, vux, medias, vrnz, 0);%mahalanobis hecho
                    case 4
                        suma2=sumak(nc,nr,nclx,ncly,vux);
                        aux=KNN(nc,vux,suma2,nr, 0, autok); 
           end
           
           
           
           if aux>0 && aux<=nc
            susconf(f1,aux)=susconf(f1,aux)+1;
           end
           
        end
         maximo=[maximo,susconf];
    end
    disp(susconf);
    por=porcentaje(nc,nr,susconf);
    parcerito=clase(nc,nr,susconf);
    porcls=[porcls,parcerito];
    disp(parcerito);
    disp(por);
    maxx=max(max(maximo));
    maxf1=find(maximo==maxx);
    if clasi==4
        disp(maxf1);
      if maxf1==1
          fprintf('\nMejor Clasificador: Distancia Minima\n');
      elseif maxf1==2
          fprintf('\nMejor Clasificador: Bayes\n');
      elseif maxf1==3
          fprintf('\nMejor Clasificador: Mahalanobis\n');
      else
          fprintf('\nMejor Clasificador: KNN\n');
      end
    end
    disp(porcls);
    graficafinal(nc,porcls,'r');
end

function crossmethod=metodocross(nc,nr, nclx,ncly, medias, vrnz, clasi,porcls)%clasi es igual iteraciones
maximo=[];
iteracion=(nr/2);
if clasi==4
        flag3=1;
            while flag3==1
                autok=input('\nIngrese valor de K (para KNN): ');
                opcion=mod(autok,2);
                if opcion>0
                    flag3=0;
                else 
                    fprintf('El valor de K debe ser impar');
                end
            end
    end
susconf= zeros(nc); %inicializando la matriz de confusión
for f1=1:nc
    for f2=1:iteracion
        vux=[nclx(:,f2,f1);ncly(:,f2,f1)];
        
         switch clasi
                    case 1
                        aux=disMin(nc, vux, medias, 0);%aqui el clasificador  Distancia mínima hecho
                    case 2
                        aux=disbayes(nc, vux, medias, vrnz, 0); %Dis Bayes hecho
                    case 3
                        aux=mahalanobis(nc, vux, medias, vrnz, 0);%mahalanobis hecho
                    case 4
                        suma2=sumak(nc,nr,nclx,ncly,vux);
                        aux=KNN(nc,vux,suma2,nr, 0, autok); 
         end
           
          if aux>0 && aux<=nc
            susconf(f1,aux)=susconf(f1,aux)+1;
            %%susconf(f1,aux)=susconf(f1,aux)+1;
          end
           
        end
         
        maximo=[maximo,susconf];
    end
    disp(susconf);
    por=porcentaje(nc,nr,susconf);
    por=por+50;
    parcerito=clase(nc,nr,susconf);
    porcls=[porcls,parcerito];
    porcls=porcls+50;
    disp(parcerito);
    disp(por);
    maxx=max(max(maximo));
    maxf1=find(maximo==maxx);
    if clasi==4
        disp(maxf1);
      if maxf1==1
          fprintf('\nMejor Clasificador: Distancia Minima\n');
      elseif maxf1==2
          fprintf('\nMejor Clasificador: Bayes\n');
      elseif maxf1==3
          fprintf('\nMejor Clasificador: Mahalanobis\n');
      else
          fprintf('\nMejor Clasificador: KNN\n');
      end
    end
    disp(porcls);
    graficafinal(nc,porcls,'b');
end

function hold=deja(nc,nr, nclx,ncly, medias, vrnz, clasi,porcls)%clasi es igual iteraciones
maximo=[];
    if clasi==4
            flag3=1;
                while flag3==1
                    autok=input('\nIngrese valor de K (para KNN): ');
                    opcion=mod(autok,2);
                    if opcion>0
                        flag3=0;
                    else 
                        fprintf('El valor de K debe ser impar');
                    end
                end
        end
    susconf= zeros(nc); %inicializando la matriz de confusión
    iteracion=nr-1;
    for f1=1:nc
        for f2=1:iteracion
            vux=[nclx(:,f2,f1);ncly(:,f2,f1)];
             switch clasi
                        case 1
                            aux=disMin(nc, vux, medias, 0);%aqui el clasificador  Distancia mínima hecho
                        case 2
                            aux=disbayes(nc, vux, medias, vrnz, 0); %Dis Bayes hecho
                        case 3
                            aux=mahalanobis(nc, vux, medias, vrnz, 0);%mahalanobis hecho
                        case 4
                            suma2=sumak(nc,nr,nclx,ncly,vux);
                            aux=KNN(nc,vux,suma2,nr, 0, autok); 
             end

              if aux>0 && aux<=nc
                susconf(f1,aux)=susconf(f1,aux)+1;
               end

        end
            maximo=[maximo,susconf];
        end
        disp(susconf);
        por=porcentaje(nc,nr,susconf);
        parcerito=clase(nc,nr,susconf);
        porcls=[porcls,parcerito];
        disp(parcerito);
        disp(por);
        maxx=max(max(maximo));
    maxf1=find(maximo==maxx);
    if clasi==4
        disp(maxf1);
      if maxf1==1
          fprintf('\nMejor Clasificador: Distancia Minima\n');
      elseif maxf1==2
          fprintf('\nMejor Clasificador: Bayes\n');
      elseif maxf1==3
          fprintf('\nMejor Clasificador: Mahalanobis\n');
      else
          fprintf('\nMejor Clasificador: KNN\n');
      end
    end
    disp(porcls);
    graficafinal(nc,porcls,'g');
end
    
function parce=porcentaje(nc,nr,con)%con es matriz de confunsion
    a=diag(con);
    total=sum(a);
    parce=(((total/nc)/nr)*100);
end

function uwu=clase(nc,nr,con)% porcentaje por clase
    uwu=diag(con);
    for I=1:nc
        uwu(I)=((uwu(I)/nr)*100);
    end
end

function graficafinal(nc,porcentajes,color)
    figure(2)
    grid on
    hold on
    %txtlegend=[]; %Añadido a leyenda
    xlabel('Clases');
    ylabel('Precisión');
    title('Gráfica de Clases y Precisión');
    %y=porcentajes(x);
    x=1:nc
    s1='-';
    s2=color;
    s3='s';
    s=strcat(s1,s2,s3);
    plot(x,porcentajes,s,'LineWidth',2,'MarkerSize',10,'MarkerEdgeColor',color,'MarkerFaceColor',color)
    %plot(v(1,:),v(2,:),'kp','MarkerSize',10,'MarkerFaceColor','w')%impresión de punto de vector 
    legend('Resustitución','Cross-Validation','Hold in One')
end

function limpiar()
    cla reset;
end
%function Distancia mínima

function valor = disMin(n, v, med, imprimir) %nclases, vector, media(s)
%dstclss -> distancias
    for f1=1:n
        dstclss(:,f1)=norm(v-med(:,f1));%calculo de la distancia
    end
    minimo=min(min(dstclss));
    valor=find(dstclss==minimo);
    if imprimir==1
    fprintf('\n\nDISTANCIA MÍNIMA:\nEl vector  pertenece a la clase \"%d\"\n',valor);
    end

end

%funcion Bayes
function probmax1 = disbayes(n, v, med,var, imprimir) %nclases, vector, media(s), varinza(s), imprimir
    %llamada a h = resta de vector menos media
    pbayes=[];
    for f1=1:n
        datum1=subvecymed(n, v, med(:,f1));
        dato1=datum1;
        datum1t=dato1'; %transpuesta
        inversa=inv(var(:,:,f1));
        sideb=exp(-0.5*dato1*inversa*datum1t); 
        sidea=((1/(2*pi))*det(var(:,:,f1))^(-0.5));
        bayes=sidea*sideb; 
        pbayes=[pbayes, bayes];
    end
        
        %normalizando las probabilidades    
    sumprob=sum(pbayes);
    probfinal=(pbayes/sumprob)*99;
    probmax=max(max(probfinal));
    probmax1=find(probfinal==probmax);
    if imprimir == 1
        if probmax1>0
            fprintf('\n\nMAXIMA PROBABILIDAD:\nEl vector  pertenece a la clase \"%d\"\n',probmax1); 
        else
            fprintf('\n\nMAXIMA PROBABILIDAD:\nEl vector is far, far away \"%d\"\n');
        end
    elseif probmax<0
            probmax1=0;
    end
        
end

function dfinal = mahalanobis(n,v,med,var, imprimir)
    distancias=[];
    for f1=1:n
        %llamar a matriz de varianza
        matvar=inv(var(:,:,f1));
        resta=subvecymed(n, v, med(:,f1));%resta de x vector menos media
        restat=resta';%transpuesta
        dist=resta*matvar*restat;
        distancias=[distancias, dist];
  
    end
        
        %normalizando las probabilidades    
    distotal=distancias;
    dmin=min(min(distotal));
    dfinal=find(dmin==distotal);
    
    if imprimir == 1
        fprintf('\n\nMAHALANOBIS:\nEl vector  pertenece a la clase \"%d\"\n',dfinal);
    end
end

function knres=KNN(n,v,su2,nrp, imprimir, k)
    if k==0
    k=input('\nIngrese valor de K: ');
    end
    opcion=mod(k,2);
    if opcion>0
        [minimos, lminimos]=ordenar(su2,k,nrp, imprimir);
        for f1=1:k
            if imprimir==1
                fprintf('   d = %d de la clase %d\n',minimos(f1),lminimos(f1));
            end
        end
        if imprimir==1
        fprintf('\n\n KNN:\nEl vector pertenece a la clase \"%d\"\n',mode(lminimos));
        end
        knres=mode(lminimos);
        
    else 
        fprintf('El valor de K debe ser impar');
        KNN(n,v,su2,nrp, imprimir, 0);
    end
    %k es la cantidad de distancias menores a tomar   
end

%funcion varianza
function var=varianza(n,r,cx,cy, m) %nclases, repeticiones Clases, x de clase, y de clase, media(s)
    for f1=1:n
        aux=[ cx(:,:,f1)-m(1,f1); cy(:,:,f1)-m(2,f1)];
        aux1=aux';
        var(:,:,f1)=(1/r)*(aux*aux1);
    end
end

function graficando(n,v,cx,cy,color) %nclases, vector, cord.x de clase , cord.y de clase, colores
    cla reset; %"limpiar" la figura
    figure(1)
    grid on
    hold on
    txtlegend={}; %arreglo de las leyendas
    xlabel('Coordenada X');
    ylabel('Coordenada Y');
    title('Gráfica de Clases y vector');
    for f1=1:n   %Impresion de las clases
        plot(cx(1,:,f1),cy(1,:,f1),'ko','MarkerSize',10,'MarkerFaceColor',color{f1})%impresion de la (f1) clase      
            name=sprintf('Clase %d',f1);
            txtlegend=[txtlegend,name]; %Añadido a leyenda
    end
    plot(v(1,:),v(2,:),'kp','MarkerSize',10,'MarkerFaceColor','w')%impresión de punto de vector 
    txtlegend=[txtlegend,'Vector'];
    legend(txtlegend);
end

function graficando2(n,cx,cy,color) %nclases, vector, cord.x de clase , cord.y de clase, colores
    cla reset; %"limpiar" la figura
    figure(1)
    grid on
    hold on
    txtlegend={}; %arreglo de las leyendas
    xlabel('Coordenada X');
    ylabel('Coordenada Y');
    title('Gráfica de Clases y vector');
    for f1=1:n   %Impresion de las clases
        plot(cx(1,:,f1),cy(1,:,f1),'ko','MarkerSize',10,'MarkerFaceColor',color{f1})%impresion de la (f1) clase      
            name=sprintf('Clase %d',f1);
            txtlegend=[txtlegend,name]; %Añadido a leyenda
    end
    legend(txtlegend);
end

%creación de clases random
function [x,y] = crearCl(n,r) %nclases, repeticiones

    for f1=1:n
       x(:,:,f1)=randn(1,r);
       y(:,:,f1)=randn(1,r);
    end
    [x,y]=alterar(n,x,y);
    
end

%función para introducir centroides y dispersión
function [ax,ay]= alterar(n, x, y) %nclases, cord.x de clase , cord.y de clase
    ax=x;
    ay=y;
    for f1=1:n
       fprintf('Introduce el centroide en x de la clase %d   ',f1);
       temCent=input('');%variable que almacena valor del centroide x
       ax(:,:,f1)=ax(:,:,f1)+temCent;
       fprintf('Introduce el centroide en y de la clase %d   ',f1);
       temCent=input('');%variable que almacena valor del centroide y
       ay(:,:,f1)=ay(:,:,f1)+temCent;
       fprintf('\n');
    end       
        
    for f1=1:n
       fprintf('Introduce la disperción de la clase %d   ',f1);
       temCent=input('');
       ax(:,:,f1)=ax(:,:,f1)*temCent;
       ay(:,:,f1)=ay(:,:,f1)*temCent;
    end      
end

function med = medias(n,x,y) %nclases, cord.x de clase , cord.y de clase
    a=[x;y];
    for f1=1:n
       med(:,f1)=mean(a(:,:,f1),2);
    end
end

%vecd = función que guarda el vector
function v = vecd()
    vx=input('Coordenada del vector en x=  ');
    vy=input('Coordenada del vector en y=  ');
    v=[vx;vy];
    fprintf('\n');
end

%resta de x vector menos media
function h = subvecymed(n, v, med)
   %acceder a elementos de media
   h=[v(1)-med(1) v(2)-med(2)];
end

%Clasificador KNN 
%1. sumar la dimension x e y de cada clase, esto - el representante
%(dimension x - representante 1 cood x) y (dimension y - representante 1
%cood y)
%2. Obtener la  distancia 
%ordenar 
%(filas,:"elementos")
function suma = sumak(n, nrp, coodx, coody,vect)
    arreglo=[];
    for f1=1:n
        for f2=1:nrp
           restax=vect(1)-coodx(1,f2,f1);
           restay=vect(2)-coody(1,f2,f1);
           distancia = sqrt((restax.^2)+(restay.^2));
           arreglo=[arreglo distancia];
        end
    end
    suma=(arreglo);
end
function [elementos, indis]=ordenar(arre, kn,rep,imprimir)
    if imprimir==1
    fprintf('k vecinos %d',kn);
    end
    [aOrd indOrd]=sort(arre);
    elementos = aOrd(1:kn);
    indisreal = indOrd(1:kn);
    indis = fix(indisreal/rep)+1;
end
