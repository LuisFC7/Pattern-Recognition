%Perceptron
clc
clear all
close all 
warning off all
%AND
%When 00 = 0 for the rest of cases 1

c1=[1 0 1 1;0 0 0 1; 1 0 0 0];
c2=[0 0 1 0;0 1 1 1; 1 1 1 0];

psinap=[];
%Aqui poner decision si desea regresar

opcion=1;
while opcion==1
    for k=1:3
        valor=input('\nIngrese el peso sinaptico: ');
        psinap(k)=valor;
    end

    w=psinap';%correcta posición de peso sinaptico.
    r=input('\nIngrese el valor de r(r>0): ');
    xp=input('\nIngrese valor de entrada agregada (xn): ');
    %ecuación 1: w>=0 wn-r(xn) 
    %ecuación 2: w<=0 wn+r(xn)
    %donde xn son entradas y r valor propuesta
    tabla=[0 0 xp;0 1 xp;1 0 xp;1 1 xp];
    %aqui llamar funcion que resuelve
    perceptron(w,r,xp,tabla);
    %fprintf('\nDesea ingresar otro valor: ');
    opcion=input('\n¿Desea agregar otro vector? 0 = No / 1 = Si \n');   
end

function perceptron(w,r,xp,tabla)
newcolors = {'r','g','b','c','m','y','#0072BD','#D95319','#EDB120','#7E2F8E','#77AC30','#4DBEEE','#A2142F'};
xn=[];
e1=[];
e2=[];
prueba=[];
%aqui se controla las entradas de la tabla
oflag=1;
flag=1;
iteracion=0;%solo usado para imprimir las veces de la iteración;
se=1;
while flag==1
    for i=1:4
        for j=1:3
            xn(j)=tabla(i,j);
        end
        operacion=xn*w;
   
        if i<=3%este if controla las combinaciones de la tabla, para primeras 3 combinaciones verificar con ecuación 1
         %aqui se evalua las primeras 3 combinaciones de la tabla con
         %ecuacion1
            if operacion>=0
                e1=w-(xp*xn');
                w=e1;
                oflag=1;
                prueba(i)=oflag;
            else
                oflag=0;
                prueba(i)=oflag;
            end
     
        else
       %ultima combinacion de tabla verificar con combinacion 2
      %aqui evaluar con ecuación 2 
           if operacion<=0
               e1=w+(xp*xn');
               w=e1;
               oflag=1;
               prueba(i)=oflag;
           else 
               oflag=0;
               prueba(i)=oflag;
           end
      
        end
        
        disp(w);
    end
     if prueba(1)==0 & prueba(2)==0 & prueba(3)==0 & prueba(4)==0
        break;
    else
        flag==1;
    end;
    %for n=1:4 %EN ESTE FOR SE LEE EL ARREGLO DONDE SE MODFICARON LAS W
       %if prueba(n)==1
        %   se=se+1;%SI SE MODIFICAN AUMENTA EL VALOR DE LA VARIABLE
       %else 
         %   se=se+0;%SI NO SE QUEDA IGUAL
      % end        
    iteracion=iteracion+1;
    fprintf('\nIteración %d\n',iteracion);
end
  
fprintf('\n');
fprintf('\n');
%aqui desarrollar ecuación con peso sinaptico final
ecuacion=w';
fprintf('\nPeso Sinaptico final: \n');
disp(ecuacion);
x=ecuacion(1);
y=ecuacion(2);
c=ecuacion(3);

%aqui ya se calculo las ecuaciones
c1=c*-1;
x1=c1/y;
y1=c1/x;

graficacubo(x1,y1,newcolors);

end

function graficacubo(x1, y1, color) 
    cla reset; %"limpiar" la figura
        
    %cubo
    c1=[1;1];
    c2=[0 0 1; 0 1 0];
    
    %vectores
    x=linspace(0,x1);
    y=linspace(y1,0);
    
    figure(1)
    grid on
    hold on
    plot(c1(1,:),c1(2,:),'go','MarkerSize',10,'MarkerFaceColor','g')
    plot(c2(1,:),c2(2,:),'bo','MarkerSize',10,'MarkerFaceColor','b')
    plot(x,y,'k-','LineWidth',4)
    legend('clase1','clase2','plano')
    title('Grafica con cubo')
end

%esta función al parecer este demás, checar
function grafica(n,v,cx,cy,color) %nclases, vector, cord.x de clase , cord.y de clase, colores
    cla reset; %"limpiar" la figura
    figure(1)
    grid on
    hold on
    txtlegend={}; %arreglo de las leyendas
    xlabel('Coordenada X');
    ylabel('Coordenada Y');
    title('Gráfica de funcion and');
    for f1=1:n   %Impresion de las clases
        plot(cx(1,:,f1),cy(1,:,f1),'ko','MarkerSize',10,'MarkerFaceColor',color{f1})%impresion de la (f1) clase      
            name=sprintf('Clase %d',f1);
            txtlegend=[txtlegend,name]; %Añadido a leyenda
    end
    plot(v(1,:),v(2,:),'kp','MarkerSize',10,'MarkerFaceColor','w')%impresión de punto de vector 
    txtlegend=[txtlegend,'Vector'];
    legend(txtlegend);
end
